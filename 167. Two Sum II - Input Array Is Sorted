*****Binary search approach with complexity(nlogn)******

class Solution {
public:
    vector<int> twoSum(vector<int>& v, int target) {
        int size=v.size();
        
        for(int i=0;i<size-1;i++){
            int high=size-1,low=i+1;
            while(low<=high){
                int mid= low + (high-low)/2;
                if(v[i] == target-v[mid]) return {i+1,mid+1};
                else if(v[mid]<target-v[i] ) low = mid+1;
                else high=mid-1;
                       
            }
            
            if(low!=size and v[low]==target-v[i]) return {i+1,low+1};
        }
        return {};
    }
};

****Two pointer approach(bruteforce) with complexity O(n) ******

class Solution {
public:
    vector<int> twoSum(vector<int>& v, int target) {
        int i=0,j=v.size()-1;
        
        while(i<j){
            int sum = v[i] + v[j];
            if(sum == target) return {i+1,j+1};
            else if(sum>target) j--;
            else i++;
        }
        return {};
        }
};


****** using unordered map in c++  *******

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        unordered_map<int, int> mp;
        vector<int > ans(2);
        for(int  i = 0; i< numbers.size(); i++) {
            mp[numbers[i]]  = i + 1;
        }
        int index = 1;
        for(auto x: numbers){
            if(mp[target-x] > 0) {
                ans[0]= index;
                 ans[1] = mp[target-x];
                return ans;
            }
            index++;
        }
        return ans;
    }
};

