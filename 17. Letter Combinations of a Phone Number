class Solution {
public:    
    void backtracking(string digits , vector<string>& ans , int index , string mapping[] , string output){
        
        if(index == digits.length()) {
            ans.push_back(output);
            return;
        }
        int value = digits[index] - '0';
        
        string letters = mapping[value];
        for(int i=0; i<letters.length(); i++){
            output.push_back(letters[i]);
            backtracking(digits , ans , index+1 , mapping , output);
            output.pop_back();
            
        }
    }
    
     vector<string> letterCombinations(string digits) {
        vector<string> ans;
         
        int len=digits.length();
        if(len==0) return ans;
         
        string mapping[10]={ "",
                              "",
                             "abc",
                             "def",
                             "ghi",
                             "jkl",
                             "mno",
                             "pqrs",
                             "tuv",
                             "wxyz"};
        
        
        string output;
        
        backtracking(digits , ans , 0 , mapping , output);
        return ans;
        
        
    }
};
